
# PLEASE ENSURE YOU OPEN THIS FILE IN VS Code otherwise you will not be able to run it.

# *** NOTE ON COMMENTS ***
# This is a comment in Python. 
# Comments can be placed anywhere in Python code and the computer ignores them -- they are intended to be read by humans. 
# Any line with a # in front of it is a comment.
# Please read all the comments in this example file and all others.

# ========= How to Declare Variables ===========
# When you declare a variable, you determine its name and data type
# In Python however you do not need to indicate the data type of the variable.
# This is because Python detects the variable's data type by reading how data is assigned to the variable.
# You use the assignment operator ‘=‘ to assign a value to a variable.

# ************ Example 1 ************
num = 2
# the variable num is assigned the integer or whole number 2, due to the presence of digits and lack of quotation marks

# ************ Example 2 ************
num2 = 12.34
# the variable num2 is assigned the float or decimal number 12.34, due to the presence of the decimal point and lack of quotation marks

# ************ Example 3 ************
greeting = "Hello, World!"
# the variable greeting is assigned the String Hello, World!, due to the presence of quotation marks ("...")

# ************ Example 4 ************
number_str = "10"
# Watch out! Since you defined 10 within quotation marks, Python knows this is a String. It's not an integer even though we understand 10 is a number.

# ========= Changing a Value Held by a Variable  ===========
# If you want to change a value held by a variable, simply assign it another value 

# ************ Example 5 ************
num3 = 4
num3 = 5
# this changes the integer value 4 held in num3 to 5

# ========= Casting ===========
# Casting basically means taking a variable of one particular data type and “turning it into” another data type
# To do this you need to use the following functions:
#   str() - converts variable to String
#   int() - converts variable to Integer
#   float() - converts variable to Float

# ************ Example 7 ************
# Using str() to convert an Integer to String

number = 10                     
number_str2 = str(number)
print("Example 7: ")
print(number_str2)

# ************ Example 8 ************
# Using int() to convert a Float to Integer

number_float = 99.99
number_int = int(number_float)
print("Example 8: ")
print(number_int)

# run this example; notice that number_int does not contain a decimal?

# ****************** END OF EXAMPLE CODE ********************* # 

# ======================= Play around with Python a bit  ===========================================
# 
#         At this point, why not play around with creating variables? Create your own python file inside VS Code and try the following.
#         
#         name = "John"  
# 
#         Then press the 'Run' button. Nothing happens but this Python program has remembered what you set the variable 'name' to.
#         To prove this, add to your program: 
# 
#         print(name)
# 
#         and then hit Run. 'John' should be printed out by the program. 
#         
#         We write Python code statements in IDEs like VS Code so that all our variable definitions and code are saved.
#         We can then run these files as Python programs at any time we want, and we can use these programs repeatedly.
#         You are actually writing Python code already, it's that simple!
# 
# ==================================================================================================
# *** NOTE ON COMMENTS ***
# This is a comment in Python.
# Comments can be placed anywhere in Python code and the computer ignores them.
# They are intended to be read by humans. 
# Any line with a # in front of it is a comment.
# Please read all the comments in this example file and all other files.


# ========= Reading Python code =========
# You're actually reading a Python program right now.
# Comments and keywords usually appear in a different colour in code editors.
# Most other programming languages have the same structure as Python, so if you
# learn Python, you can learn the others more easily! It's not like learning 
# human languages.


#  =========  The print() function =========
# You may want your program to display or output information to the user.
# The most common way to view program output is to use the print function.
# To use print, we enter the print command followed by one or more arguments.

# ************ Example 1 ************
print("Hello, World!")
# When you run this program the computer will output the argument Hello, World!
# Note that the argument is enclosed in double quotes ("..."), which are not 
# displayed in the output. This is because "Hello, World!" is a string or list 
# of characters.

# ************ Example 2 ************
print("Printing a string.")

# A common SYNTAX error you could make above is by forgetting to add a closing ".
# Remember that all opening quotation marks (") require a closing one!


# ========= How to get input =========
# Sometimes you want a user to enter something through the keyboard.
# The following input command will show the text "Enter your name: " in the
# output box of the program and the program will halt
# until the user enters something with their keyboard and presses ENTER.

# ************ Example 3 ************
# The following input commands will get the user's name and age.

name = input("Enter your name: ")
age = input("Enter your age: ")

# The variable 'name' stores what the user entered into the box as a string.
# The variable 'age' also stores what the user entered into the box as a string.
# Now, when you try running this file, notice the output produced by the 
# following command.
print(name, age)
print("{} is {} years old!".format(name, age))

# A common SYNTAX error you could make above is by forgetting to add a closing 
# bracket ‘)’. Remember that all opening brackets ‘(’ , require a matching 
# closing one!


#  ========= Running Python files =========
# Now that you know how to write code, it's time to learn how to execute your 
# code to see what the output is.
# Let's 'RUN' this Python file and take a look at what output it produces (if any).
# When you write Python code, you'll have to run it often to test that your 
# programs are doing what you'd like them to do.

# There are different ways to 'run' Python files.

#  ========= OPTION 1: Run from Visual Studio Code GUI -- THE EASY WAY =========
# The easiest way to run Python files and this program is through a GUI 
# (Graphical User Interface). Open the terminal via the View menu bar.
# Press F5 on your keyboard to RUN the Python file and the output will appear in
# the terminal within Visual Studio Code. You can use this method to run ANY 
# Python file (i.e. a file with a .py extension). If there is an error in your 
# code, the code won't run and the error will be printed out in the terminal.

# Errors are things like trying to add two variables that aren't the same data 
# type, or using a variable that isn't declared! (i.e. if you say num = num1+num2
# and you haven't said what num1 and num2 are above this statement!) 
# We'll talk about errors more later.

# Play around with this program. Change statements and delete things, run the
# code and see what happens.

# We advise that you complete all tasks and open all example files in Visual
# Studio Code.
# Perhaps create a shortcut to Visual Studio Code on your desktop so that you 
# can access it faster.
# You can also use Notepad++ or Visual Studio Code to view the example.py files, but Notepad++ can 
# only be used to view the text of a code. You can't run programs with Notepad++.

#  ========= OPTION 2: Use any GUI/IDE that you want.  -- ADVANCED =========
# An IDE is a program like Visual Studio Code.
# You get many programs that let you run code within them.
# Some of these IDEs are more complicated than others.
# See http://wiki.python.org/moin/PythonEditors for a huge list of different 
# IDEs that can run Python files.
# As long as you know how to use Visual Studio Code, you can complete our 
# entire course. We do NOT recommend using another editor as issues may occur requiring extra support.


# ****************** END OF EXAMPLE CODE ********************* #